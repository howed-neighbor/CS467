<!DOCTYPE html>

<html lang="en">

    <head>
        <title>datapotato</title>
        <meta charset="utf-8">
        <script src="./js/interactions.js"></script>
    </head>

    <h1>Using Components with known vulnerabilities</h1>
    <hr class="light">


    <h3>Description</h3>
        <table class="markdown">
            <tr>
                <th>Source</th>
                <th>Definition</th>
            </tr>
            <tr>
                <td>Team Treehouse</td>
                <td><span class="bold">Components</span> such as libraries, frameworks, and other software modules, run with same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover.  Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.</td>
            </tr>
            <tr>
                <td>GeeksforGeeks</td>
                <td><span class="bold">Components with known vulnerabilities</span> can be defined as third-party apps or software platforms that are outdated and contain bugs that are public to all, i.e. sites like <a href="https://www.exploit-db.com">exploit-db</a> contain the full details as to how to exploit the bugs to put the security of the whole website under severe threat.</td>
            </tr>
            <tr>
                <td>WhiteSource</td>
                <td><span class="bold">Components with known vulnerabilities</span> contain vulnerabilities that were discovered in open source components and published in the NVD, security advisories or issue trackers.  From the moment of publication, a vulnerability can be exploited by hacker who find the documentation.</td>
            </tr>
        </table>

    <p>As developers, we often solely focus on functionality of the software we are writing, very rarely do we think about security.  We'll often incorporate libraries that help us get our job done, but we don't do our due diligence in researching possible vulnerabilities associated with those libraries.  The security often gets overlooked.</p>

    <hr>
    <h3 id="demonstration">Demonstration</h3>
        <p>N/A</p>

    <hr>
    <h3>Remediation</h3>
        <p>A mitigation technique to discover vulnerabilities against our web application is to manually check the libraries and version against exploit databases, CVEs, etc.  This is how we discovered the vulnerability with <span class="bold">node serialize v.0.0.4</span>, however, there are more efficient methods to do so.  As developers we can employ automated scanners, such as <a href="https://www.tenable.com">Tenable's Nessus</a> or <a href="https://www.openvas.org">Openvas</a>.</p>
        
        <p>Automated scanners enable developers to continuously monitor their web application for current and new vulnerabilities not only in our web applications, but in all software running on our Host system. Very rarely do hackers rely on one vulnerability to gain control of a system.  Systems are usually "rooted" by chaining multiple exploits together. Automated scanners are an effective way to discover vulnerabilities and address "low hanging fruit".</p>

        <p>Once a component with a known vulnerability is discovered, developers should seek to remove that component from their application, or mitigate the vulnerability.  In the Insecure Deserialization section, we mitigated the vulnerability with the use of the <code>JSON.stringify</code> function.  A more preferable solution, would be to use another library that provides the same functionality, but without the vulnerabilty.</p>
        
        <p>The nodejs engine <span class="bold">v8</span> provides us such a capability. It allows to serialize and deserialize objects.<p>
        
        <p>Our code to serialize user input is now:</p>
        
        <p class="codeBlock">var v8 = require('v8')<br>
            var obj = req.body.userInput<br>
            var serialized = v8.serialize(obj)<br>
            var json = JSON.stringify(serialized)</p>

        <p>Here we'll serialize an object:<p>
        
        <p class="codeBlock">{{benign}}</p>

        <form action="/usingComponentsWithKnownVulnerabilities/serialize" method="post">
            <fieldset>
                <legend>safeComponent</legend>
                    <label>User Input:
                        <input type="hidden" name="type" value="default">
                        <input type="textarea" name="userInput" placeholder="User Input" required>
                    </label>
                    <input type="submit" value="Serialize"/>
            </fieldset>
        </form>

        <p>Result:</p>
        {{#if serialized}}
        <table class="markdown">
            <tr>
                <th>Serialized Object</th>
            </tr>
            <tr class="text_small">
        <td>{{serialized}}</td>
            <tr>
        </table>
        {{else}}<span class="deselected">[...]<br></span>
        {{/if}}

        <p>Our code to deserialize an object is now:</p>
        <p class="codeBlock">var obj = Buffer.from(JSON.parse(req.body.userInput).data)<br>
        var deserialized = obj.toString('utf8')<br></p>
        <p>To deserialize the object, type the following into the form:<br>
        <span class="text_grey">(this omits the &amp;nbsp, CRLF and extra " v8 adds to the serialized object):</span></p>
        <p class="codeBlock">{{test}}</p>

        <form action="/usingComponentsWithKnownVulnerabilities/deserialize" method="post">
            <fieldset>
                <legend>safeComponent</legend>
                    <label>User Input:
                        <input type="hidden" name="type" value="default">
                        <input type="textarea" name="userInput" placeholder="User Input" required>
                    </label>
                    <input type="submit" value="Deserialize"/>
            </fieldset>
        </form>

        <p>Result:</p>

        {{#if deserialized}}
        <table class="markdown">
            <tr>
                <th>Deserialized Object</th>
            </tr>
            <tr class="text_small">
                <td>{{deserialized}}</td>
            <tr>
        </table>

        {{else if error}}
        <table class="markdown">
            <tr>
                <th>Error Message</th>
            </tr>
            <tr class="text_small">
        <td>{{error}}</td>
            <tr>
        </table>

        <p>We now receive a error message, instead of a BIND shell.</p>
            {{else}}<span class="deselected">[...]<br></span>
            {{/if}}

        <p>As in the Insecure Deserialization Section, attempt to start up a BIND shell on our webserver, by deserializing the following malicious input in the form above:<p>

        <p class="codeBlock">{{payload}}</p>

    <hr>
    <h3>Citations: Using Components with known vulnerabilities</h3>
        <p>"Insecure Components" Team Treehouse.<br>
            <a href=https://teamtreehouse.com/library/insecure-components>https://teamtreehouse.com/library/insecure-components</a> (accessed Feb 18, 2022).</p>
        <p>"What is using components with known vulnerabilities". GeeksForGeeks.</br>
            <a href="https://www.geeksforgeeks.org/what-is-components-with-known-vulnerability/">https://www.geeksforgeeks.org/what-is-components-with-known-vulnerability/</a> (accessed Feb 19, 2022).</p>
        <p>"You can't ignore using components with known vulnerabilities". Whitesource.</br>
            <a href="https://www.whitesourcesoftware.com/resources/blog/using-components-with-known-vulnerabilities/">https://www.whitesourcesoftware.com/resources/blog/using-components-with-known-vulnerabilities/</a> (accessed Feb 19, 2022).</p>

</html>